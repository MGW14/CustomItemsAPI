package work.mgnet.customitemsapi.listener;

import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.PrepareItemCraftEvent;
import org.bukkit.inventory.ItemStack;

import work.mgnet.customitemsapi.CustomItemsAPI;
import work.mgnet.customitemsapi.data.CustomItemStack;
import work.mgnet.customitemsapi.data.CustomRecipe;

public class AntiCraftListener implements Listener {
	
	@EventHandler
	public void onCraft(PrepareItemCraftEvent e) {
		if (e.getInventory().getResult() == null) return;
		for (CustomRecipe recipe : CustomItemsAPI.recipes) {
			if (e.getInventory().getResult().hasItemMeta() && e.getInventory().getRecipe().getResult().getItemMeta().hasDisplayName() && e.getInventory().getResult().getItemMeta().getDisplayName().equalsIgnoreCase(CustomItemStack.fromCiSforCrafting(recipe.getResult()).getItemMeta().getDisplayName())) {
				ItemStack topleft = e.getInventory().getItem(1);
				ItemStack topmid = e.getInventory().getItem(2);
				ItemStack topright = e.getInventory().getItem(3);
				ItemStack midleft = e.getInventory().getItem(4);
				ItemStack midmid = e.getInventory().getItem(5);
				ItemStack midright = e.getInventory().getItem(6);
				ItemStack bottomright = e.getInventory().getItem(7);
				ItemStack bottommid = e.getInventory().getItem(8);
				ItemStack bottomleft = e.getInventory().getItem(9);
				System.out.println(isPossible(topleft, recipe.getTopleft()));
				System.out.println(isPossible(topmid, recipe.getTopmid()));
				System.out.println(isPossible(topright, recipe.getTopright()));
				System.out.println(isPossible(midleft, recipe.getMiddleleft()));
				System.out.println(isPossible(midmid, recipe.getMiddlemid()));
				System.out.println(isPossible(midright, recipe.getMiddleright()));
				System.out.println(isPossible(bottomright, recipe.getDownright()));
				System.out.println(isPossible(bottommid, recipe.getDownmid()));
				System.out.println(isPossible(bottomleft, recipe.getDownleft()));
			}
		}
		for (int i = 1; i < 10; i++) {
			try {
				if (e.getInventory().getItem(i).getItemMeta().hasCustomModelData() || e.getInventory().getItem(i).getItemMeta().isUnbreakable()) {
					e.getInventory().setResult(null);
				}
			} catch (Exception exc) {
				
			}
		}
		
	}

	public boolean isPossible(ItemStack in, CustomItemStack in2) {
		if (!in2.hasCustomModelData()) return true;
		return in.getItemMeta().getCustomModelData() == in2.getCustomModelData();
	}
	
}
